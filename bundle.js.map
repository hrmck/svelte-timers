{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte-themer/components/presets.js","../../node_modules/svelte/store/index.mjs","../../node_modules/svelte-themer/support/store.js","../../node_modules/svelte-themer/support/toggle.js","../../node_modules/svelte-themer/support/processConfig.js","../../node_modules/svelte-themer/support/css.js","../../node_modules/svelte-themer/components/ThemeWrapper.svelte","../../node_modules/svelte-themer/support/isObject.js","../../src/themes.js","../../src/PomoTimerTypes.svelte","../../src/SettingButton.svelte","../../src/PomoTimerSettings.svelte","../../src/WorkSessionCounter.svelte","../../src/TimerDisplay.svelte","../../src/PomoTimer.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape_attribute_value(value.toString())}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.48.0' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        throw new Error(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","export const presets = {\n  light: {\n    colors: {\n      text: '#282230',\n      background: {\n        _: '#f1f1f1',\n        contrast: '#b1b1b1',\n      },\n      primary: '#01796f',\n      primary_dark: '#016159',\n      secondary: '#562931',\n    },\n  },\n  dark: {\n    colors: {\n      text: '#f1f1f1',\n      background: {\n        _: '#27323a',\n        contrast: '#0d1215',\n      },\n      primary: '#01978b',\n      primary_dark: '#00887c',\n      secondary: '#fe8690',\n    },\n  },\n  forest: {\n    colors: {\n      text: '#f9f2cf',\n      background: {\n        _: '#3b6c4c',\n        contrast: '#1d492c',\n      },\n      primary: '#efdc7e',\n      primary_dark: '#e4d589',\n      secondary: '#4a875f',\n    },\n  },\n  // {\n  //   name: 'forest',\n  //   light: {\n  //     textColor: '#f9f2cf',\n  //     backgroundColor: '#3b6c4c',\n  //     button: {\n  //       primary: {\n  //         backgroundColor: 'var(--theme-colors-primary)',\n  //         color: 'var(--theme-text-color)',\n  //       },\n  //     },\n  //     colors: {\n  //       primary: '#51a56e',\n  //       secondary: '#4a875f',\n  //     },\n  //   },\n  //   dark: {\n  //     textColor: '#beb9a0',\n  //     backgroundColor: '#1d492c',\n  //     colors: {\n  //       primary: '#316643',\n  //     },\n  //   },\n  // },\n}\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { writable } from 'svelte/store'\n\nexport const currentMode = writable()\nexport const currentThemeName = writable()\nexport const currentThemeObject = writable()\nexport const themes = writable()\n","import { get } from 'svelte/store'\nimport { currentThemeName, themes as themesStore } from './store'\n\n/**\n * Toggle Theme\n */\nexport default function toggle() {\n  let themes = get(themesStore)\n  currentThemeName.update(current => {\n    let keys = Object.keys(themes)\n    return keys.reduce((newCurrent, theme, index, source) => {\n      if (theme === current) {\n        if (source[index + 1]) return source[index + 1]\n        else return source[0]\n      }\n      return newCurrent\n    }, '')\n  })\n}\n","/**\n * Recursively process configuration object from nested to kebab-case\n * @name processConfig\n * @param {object} obj\n *\n */\nexport default function processConfig(obj) {\n  const result = {}\n\n  const recurse = (obj, current) => {\n    for (let prop in obj) {\n      const value = obj[prop]\n      const key = (current ? `${current}-${prop}` : prop)\n        .replace(/-_$/g, '')\n        // .replace(/([a-z0-9])([A-Z])/g, '$1-$2')\n        .replace(/([A-Z])([A-Z])(?=[a-z])/g, '$1-$2')\n        .toLowerCase()\n\n      if (value && typeof value === 'object') {\n        recurse(value, key)\n      } else {\n        result[key] = value\n      }\n    }\n  }\n\n  recurse(obj)\n\n  return result\n}\n","import { get } from 'svelte/store'\nimport processConfig from './processConfig'\nimport { themes as themesStore } from './store'\n\n/**\n * CSS Variable Name\n * @typedef {string} CSSVariableName\n */\n\n/**\n * CSS Variable Statement\n * @typedef {string} CSSVariableStatement\n */\n\n/**\n * @typedef {object} CreateCSSVariableNameInput\n * @property {string} variablePrefix\n * @property {string} prop property name\n * @property {string} [key] optional prop prefix\n *\n * Helper to create CSS Variable name string\n * @param {CreateCSSVariableNameInput}\n * @returns {CSSVariableName}\n */\nexport function createCSSVariableName({ variablePrefix, prop, key }) {\n  if (key) return `${variablePrefix}-${key}-${prop}`\n  else return `${variablePrefix}-${prop}`\n}\n\n/**\n * Helper to merge variable name and value to create statement\n * @param {CSSVariableName} variableName CSS Variable name\n * @param {string} value CSS Variable Value\n * @returns {CSSVariableStatement}\n */\nexport function createCSSVariableStatement(variableName, value) {\n  return `${variableName}: ${value};`\n}\n\n/**\n * @typedef {object} CreateCSSVariableOverrideInput\n * @property {CSSVariableName} initialVariableName\n * @property {CSSVariableName} themeVariableName\n *\n * Helper to create variable overrides for themed use\n * @param {CreateCSSVariableOverrideInput}\n * @returns {string}\n */\nexport function createCSSVariableOverride({\n  initialVariableName,\n  themeVariableName,\n}) {\n  return `${initialVariableName}: var(${themeVariableName});`\n}\n\n/**\n *\n * @param {object} config\n * @param {Object} options\n * @param {string} options.prefix\n * @returns {[CSSVariableName, <string,CSSVariableName>]}\n */\nexport function createCSSVariableCollection(config, { prefix } = {}) {\n  const variablePrefix = prefix ? `--${prefix}` : '-'\n  const processedConfig = processConfig(config)\n  const variables = Object.entries(processedConfig).map(([prop, value]) => {\n    return [createCSSVariableName({ variablePrefix, prop }), value]\n  })\n  return variables\n}\n\n/**\n * Create CSS template\n * @name createCSSTemplate\n * @param {string} prefix - CSS variable prefix\n * @param {Object[]} themes - themes array\n * @returns {string} CSS template\n */\nexport function createCSSTemplate(prefix, base = {}) {\n  const variablePrefix = prefix ? `--${prefix}` : '-'\n\n  const themes = get(themesStore)\n\n  // process and add base config to root content\n  const processedBaseConfig = processConfig(base)\n\n  const baseCSSVariables = Object.entries(processedBaseConfig).map(\n    ([prop, value]) => [createCSSVariableName({ variablePrefix, prop }), value]\n  )\n  const rootCSSVariables = [].concat(baseCSSVariables)\n  const themeCSSContent = []\n\n  for (let [themeName, themeValues] of Object.entries(themes)) {\n    const processed = processConfig(themeValues)\n\n    const overrides = []\n    for (let [prop, value] of Object.entries(processed)) {\n      // create and add initial variables\n      const initialVariableName = createCSSVariableName({\n        variablePrefix,\n        prop,\n      })\n      // do not add initial variable if provided by base\n      if (\n        !rootCSSVariables.some(\n          ([variableName]) => variableName === initialVariableName\n        )\n      ) {\n        rootCSSVariables.push([initialVariableName, value])\n      }\n      // add theme vars to root theme array\n      rootCSSVariables.push([\n        createCSSVariableName({ variablePrefix, prop, key: themeName }),\n        value,\n      ])\n      // add theme-specific overrides of initial variables\n      overrides.push(\n        createCSSVariableOverride({\n          initialVariableName,\n          themeVariableName: createCSSVariableName({\n            variablePrefix,\n            prop,\n            key: themeName,\n          }),\n        })\n      )\n    }\n\n    const themeCSSClassName = prefix ? `${prefix}--${themeName}` : themeName\n    themeCSSContent.push(`\n      [theme='${themeName}'],\n      .${themeCSSClassName} {\n        ${overrides.join('\\n\\t')}\n      }\n    `)\n  }\n  // add to root\n\n  const template = `\n    <style>\n      :root {\n        ${rootCSSVariables\n          .map(vars => createCSSVariableStatement(...vars))\n          .join('')}\n      }\n\n      ${themeCSSContent.join('')}\n    </style>\n  `\n\n  return template.trim()\n}\n","<script context=\"module\">\n  export const STORAGE_KEY = '__svelte-themer__theme'\n  export const CONTEXT_KEY = 'theme'\n  export const VARIABLE_PREFIX = 'theme'\n  export const VALID_MODES = ['auto', 'light', 'dark']\n\n  export const INVALID_THEMES_MESSAGE = 'Invalid themes object supplied'\n  export const INVALID_PREFIX_MESSAGE = 'Invalid prefix string supplied'\n  export const INVALID_MODE_MESSAGE = `Invalid mode string supplied, must be one of: ${VALID_MODES.join(\n    ', '\n  )}`\n</script>\n\n<script>\n  import { onMount, afterUpdate, setContext } from 'svelte'\n  import { presets } from './presets'\n  import toggle from '../support/toggle'\n  import { createCSSTemplate } from '../support/css'\n  import {\n    currentThemeName,\n    currentThemeObject,\n    currentMode,\n    themes as themesStore,\n  } from '../support/store'\n  import isObject from '../support/isObject'\n\n  /**\n   * Specify the key used for local storage\n   * @type {string} [key='__svelte-themer__theme']\n   */\n  export let key = STORAGE_KEY\n  /**\n   * Themes collection\n   * @type {Object} themes - theme object\n   */\n  export let themes = presets\n  /**\n   * Sets the specified theme as active\n   * @type {string | null} [theme='dark']\n   */\n  export let theme = null\n  /**\n   * Specify custom CSS variable prefix\n   * @type {string | null} [prefix='theme']\n   */\n  export let prefix = VARIABLE_PREFIX\n  /**\n   * Specify preferred theme mode\n   * @type {\"auto\" | \"dark\" | \"light\"} [mode='auto']\n   */\n  export let mode = 'auto'\n  /**\n   * Site default CSS variables\n   * @type {Object} [base={}]\n   */\n  export let base = {}\n\n  if (!isObject(themes) || !Object.keys(themes).length)\n    throw new Error(INVALID_THEMES_MESSAGE)\n  if (typeof prefix === 'string' && !prefix.trim().length)\n    throw new Error(INVALID_PREFIX_MESSAGE)\n  if (!VALID_MODES.includes(mode)) throw new Error(INVALID_MODE_MESSAGE)\n\n  themesStore.set(themes)\n  const [fallback] = Object.keys(themes)\n  if (!Object.keys(themes).includes($currentThemeName)) {\n    currentThemeName.set(fallback)\n  }\n  $: currentThemeObject.set(themes[$currentThemeName])\n\n  // create CSS\n  const style = createCSSTemplate(prefix, base, themes)\n\n  setContext(CONTEXT_KEY, {\n    current: currentThemeName,\n    toggle,\n    theme: currentThemeName,\n  })\n\n  onMount(() => {\n    // detect dark mode\n    const darkSchemeQuery = matchMedia('(prefers-color-scheme: dark)')\n    // determine the users preferred mode\n    const preferredMode = darkSchemeQuery.matches ? 'dark' : 'light'\n    // listen for media query status change\n    darkSchemeQuery.addEventListener(\n      'change',\n      ({ matches }) =>\n        mode === 'auto' && currentMode.set(matches ? 'dark' : 'light')\n    )\n\n    // loading order: saved, prefers, fallback\n    const saved = key ? localStorage && localStorage.getItem(key) : null\n\n    if (theme && themes[theme]) {\n      currentThemeName.set(theme)\n    } else if (saved && themes[saved]) {\n      currentThemeName.set(saved)\n    } else {\n      if (mode === 'auto' && preferredMode && themes[preferredMode]) {\n        currentThemeName.set(preferredMode)\n      } else if (['light', 'dark'].includes(mode) && themes[mode]) {\n        currentThemeName.set(mode)\n      } else {\n        currentThemeName.set(fallback)\n      }\n    }\n\n    return () =>\n      key && localStorage && localStorage.setItem(key, $currentThemeName)\n  })\n\n  afterUpdate(() => {\n    if (document)\n      document.documentElement.setAttribute('theme', $currentThemeName)\n    if (key && localStorage) localStorage.setItem(key, $currentThemeName)\n  })\n</script>\n\n<svelte:head>\n  {@html style}\n</svelte:head>\n\n<slot>\n  <!-- children -->\n</slot>\n","/**\n * Helper function to determine whether input is an Object\n * @param {object} obj\n * @returns {boolean}\n */\nexport default function isObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]'\n}\n","export const themes = {\n    light: {\n        colors: {\n            text: '#f5f5f5',\n            background: {\n                _: '#d8d4d6',\n                contrast: '#363033',\n            },\n            primary: '#ff3e00',\n            primary_dark: '#9d2600',\n            secondary: '#677DB7',\n        },\n    },\n    dark: {\n        colors: {\n            text: '#f5f5f5',\n            background: {\n                _: '#162B3C',\n                contrast: '#060b0f',\n            },\n            primary: '#A22901',\n            primary_dark: '#651A01',\n            secondary: '#167631',\n        },\n    },\n}\n\nexport default themes;\n","<script>\n    export let timers;\n    export let currentTimer;\n    export let timerStarted;\n</script>\n\n<div>\n    {#each timers as timer}\n        <button\n            class=\"timer__{currentTimer == timer ? 'active' : ''}\"\n            disabled={timerStarted}\n            on:click={() => {\n                currentTimer = timer;\n            }}\n        >\n            {timer.label}\n        </button>\n    {/each}\n</div>\n\n<style>\n    div {\n        display: flex;\n        flex-flow: row nowrap;\n    }\n\n    button {\n        flex-grow: 1;\n\n        background-color: transparent;\n        color: inherit;\n        font-size: 24px;\n\n        border: 3px solid;\n        border-radius: 0;\n        padding: 12px;\n        margin: -1px;\n    }\n    button:first-of-type {\n        border-radius: 10px 0 0 10px;\n    }\n    button:last-of-type {\n        border-radius: 0 10px 10px 0;\n    }\n    button:hover {\n        background-color: var(--theme-colors-primary_dark);\n    }\n\n    .timer__active {\n        background-color: var(--theme-colors-secondary);\n    }\n</style>\n","<script>\n    //todo: add animation when clicked\n    let settingsImage = \"./assets/settings.png\";\n    let closeSettingsImage = \"./assets/close.png\";\n    export let settingsVisible = false;\n</script>\n\n<button\n    on:click|preventDefault={() => {\n        settingsVisible = !settingsVisible;\n    }}\n    id=\"image-button\"\n>\n    {#if settingsVisible}\n        <img src={closeSettingsImage} alt=\"Close settings\" />\n    {:else}\n        <img src={settingsImage} alt=\"Open settings\" />\n    {/if}\n</button>\n\n<style>\n    button {\n        background-color: transparent;\n\n        border: 0;\n        padding: 0;\n        margin: 0;\n    }\n</style>\n","<script>\n    import { createEventDispatcher } from \"svelte\";\n    let dispatch = createEventDispatcher();\n\n    export let workDuration = 25;\n    export let shortRestDuration = 5;\n    export let longRestDuration = 10;\n    export let timerStarted = false;\n    export let autoStartTimer = false;\n\n    let workDurationInput;\n    let shortRestDurationInput;\n    let longRestDurationInput;\n\n    const editTimerSettings = () => {\n        dispatch(\"updateTimerSettings\", {\n            workDurationInput: workDurationInput * 60,\n            shortRestDurationInput: shortRestDurationInput * 60,\n            longRestDurationInput: longRestDurationInput * 60,\n            autoStartTimer,\n        });\n    };\n    const resetDefaultSettings = () => {\n        dispatch(\"resetTimerSettings\");\n        const inputs = document.getElementsByTagName(\"input\");\n        for (let i = 0; i < inputs.length; i += 1) {\n            inputs[i].value = \"\";\n        }\n    };\n</script>\n\n<form class=\"flex-container\">\n    <div class=\"grid-container\">\n        <h2>Settings</h2>\n        <label for=\"work\">Work time (mins):</label>\n        <input\n            type=\"number\"\n            id=\"work\"\n            placeholder={workDuration}\n            bind:value={workDurationInput}\n            disabled={timerStarted}\n        />\n        <label for=\"short-rest\"> Short rest time (mins):</label>\n        <input\n            type=\"number\"\n            id=\"short-rest\"\n            placeholder={shortRestDuration}\n            bind:value={shortRestDurationInput}\n            disabled={timerStarted}\n        />\n        <label for=\"long-rest\"> Long rest time (mins):</label>\n        <input\n            type=\"number\"\n            id=\"long-rest\"\n            placeholder={longRestDuration}\n            bind:value={longRestDurationInput}\n            disabled={timerStarted}\n        />\n        <label for=\"toggle-auto\"\n            >Auto start timer after it ends <br />\n            (Manually stop the timer will deactivate this setting)\n        </label>\n        <input\n            type=\"checkbox\"\n            id=\"toggle-auto\"\n            bind:checked={autoStartTimer}\n            disabled={timerStarted}\n        />\n    </div>\n\n    <div id=\"button-container\">\n        <button\n            on:click|preventDefault={editTimerSettings}\n            disabled={timerStarted}\n        >\n            Set\n        </button>\n        <button\n            on:click|preventDefault={resetDefaultSettings}\n            disabled={timerStarted}\n        >\n            Reset Default\n        </button>\n    </div>\n\n    <ul>\n        <li>\n            <a\n                href=\"https://www.flaticon.com/free-icons/settings\"\n                title=\"settings icons\"\n            >\n                Settings icons created by Pixel perfect - Flaticon\n            </a>\n        </li>\n        <li>\n            <a\n                href=\"https://www.flaticon.com/free-icons/cross-mark\"\n                title=\"cross mark icons\"\n            >\n                Cross mark icons created by Ilham Fitrotul Hayat - Flaticon\n            </a>\n        </li>\n    </ul>\n</form>\n\n<style>\n    form {\n        background-color: var(--theme-colors-secondary);\n        width: 100%;\n        height: 100%;\n    }\n    h2 {\n        font-weight: 500;\n    }\n    button {\n        padding: 8px 12px;\n        margin: 0;\n    }\n    button:first-of-type {\n        margin-right: 10px;\n    }\n    ul {\n        list-style-type: none;\n        padding: 0;\n        margin: 0;\n    }\n\n    .flex-container {\n        display: flex;\n        flex-flow: column nowrap;\n        justify-content: space-evenly;\n    }\n\n    .grid-container {\n        display: grid;\n        grid-template-columns: auto 150px;\n        gap: 15px 20px;\n    }\n    .grid-container > h2 {\n        grid-column: span 2;\n\n        margin: 0;\n    }\n    .grid-container > label {\n        align-self: center;\n        text-align: left;\n    }\n    .grid-container > input {\n        width: 100%;\n        margin: 0;\n        align-self: center;\n        justify-self: flex-end;\n    }\n\n    #button-container {\n        display: flex;\n        flex-flow: row nowrap;\n        justify-content: flex-end;\n    }\n</style>\n","<script>\n    export let workCount = 0;\n    export let targetWorkCount = 4;\n</script>\n\n<div>\n    {#each Array(workCount) as _, index (index)}\n        <span class=\"tomato filled\" />\n    {/each}\n    {#each Array(targetWorkCount - workCount) as _, index (index)}\n        <span class=\"tomato\" />\n    {/each}\n</div>\n\n<style>\n    div {\n        display: flex;\n        flex-flow: row wrap;\n        justify-content: center;\n    }\n    .tomato {\n        height: 18px;\n        width: 18px;\n        border: 2px solid var(--theme-colors-text);\n        border-radius: 50%;\n        margin: 3px 10px;\n    }\n    .filled {\n        background-color: var(--theme-colors-text);\n    }\n</style>\n","<script>\n    export let duration;\n    $: minutes_text =\n        Math.floor(duration / 60) % 60 < 10\n            ? \"0\" + (Math.floor(duration / 60) % 60)\n            : \"\" + (Math.floor(duration / 60) % 60);\n    $: seconds_text =\n        duration % 60 < 10 ? \"0\" + (duration % 60) : \"\" + (duration % 60);\n</script>\n\n<p>\n    {minutes_text}:{seconds_text}\n</p>\n\n<style>\n    p {\n        font-size: 72px;\n        margin: 0;\n    }\n</style>\n","<script>\n    import TimerTypes from \"./PomoTimerTypes.svelte\";\n    import SettingButton from \"./SettingButton.svelte\";\n    import Settings from \"./PomoTimerSettings.svelte\";\n    import WorkSessionCounter from \"./WorkSessionCounter.svelte\";\n    import TimerDisplay from \"./TimerDisplay.svelte\";\n\n    let settingsVisible = false;\n\n    class Timer {\n        constructor(label, time) {\n            this.label = label;\n            this.time = time; // in seconds\n        }\n\n        get timeInMins() {\n            return Math.floor(this.time / 60);\n        }\n    }\n\n    const DEFAULT_TIMERS = {\n        work: 1500,\n        shortBreak: 300,\n        longBreak: 900,\n    };\n\n    let workTimer = new Timer(\"Work\", DEFAULT_TIMERS.work);\n    let shortBreakTimer = new Timer(\"Short Break\", DEFAULT_TIMERS.shortBreak);\n    let longBreakTimer = new Timer(\"Long Break\", DEFAULT_TIMERS.longBreak);\n\n    let timers = [workTimer, shortBreakTimer, longBreakTimer];\n\n    let currentTimer = workTimer;\n    let countDownTimer;\n    let timerStarted = false;\n    let workCount = 0;\n    let targetWorkCount = 4;\n    let autoStartTimer = false;\n\n    $: duration = currentTimer.time;\n\n    const startCountDownTimer = () => {\n        timerStarted = true;\n        countDownTimer = setInterval(() => {\n            if (duration == 0) {\n                if (currentTimer == workTimer) {\n                    workCount += 1;\n                }\n                stopCountDownTimer();\n                return;\n            }\n            duration -= 1;\n        }, 1000);\n    };\n\n    const stopCountDownTimer = () => {\n        timerStarted = false;\n        clearInterval(countDownTimer);\n\n        if (currentTimer == workTimer) {\n            workCount += 1;\n            if (workCount == targetWorkCount) {\n                currentTimer = longBreakTimer;\n            } else {\n                currentTimer = shortBreakTimer;\n            }\n        } else {\n            if (currentTimer == longBreakTimer) {\n                workCount = 0;\n            }\n            currentTimer = workTimer;\n        }\n\n        if (autoStartTimer) {\n            startCountDownTimer();\n        }\n    };\n\n    const updateTimerSettings = (e) => {\n        console.log(\"UPDATE\");\n        console.log(e.detail);\n        if (!isNaN(e.detail.workDurationInput)) {\n            workTimer.time = e.detail.workDurationInput;\n        }\n        if (!isNaN(e.detail.shortRestDurationInput)) {\n            shortBreakTimer.time = e.detail.shortRestDurationInput;\n        }\n        if (!isNaN(e.detail.longRestDurationInput)) {\n            longBreakTimer.time = e.detail.longRestDurationInput;\n        }\n        autoStartTimer = e.detail.autoStartTimer;\n        duration = currentTimer.time;\n\n        settingsVisible = false;\n    };\n\n    const resetTimerSettings = () => {\n        console.log(\"RESET\");\n        workTimer.time = DEFAULT_TIMERS.work;\n        shortBreakTimer.time = DEFAULT_TIMERS.shortBreak;\n        longBreakTimer.time = DEFAULT_TIMERS.longBreak;\n        duration = currentTimer.time;\n    };\n</script>\n\n<div id=\"pomodoro-timer\">\n    <TimerTypes {timers} {timerStarted} bind:currentTimer />\n\n    <div\n        class=\"grid-container settings__{settingsVisible ? 'active' : ''}\"\n        id=\"timer\"\n    >\n        <div class=\"grid-item\" id=\"toggle-settings\">\n            <SettingButton bind:settingsVisible />\n        </div>\n\n        {#if settingsVisible}\n            <div class=\"grid-item\" id=\"settings\">\n                <Settings\n                    workDuration={workTimer.timeInMins}\n                    shortRestDuration={shortBreakTimer.timeInMins}\n                    longRestDuration={longBreakTimer.timeInMins}\n                    {timerStarted}\n                    {autoStartTimer}\n                    on:updateTimerSettings={updateTimerSettings}\n                    on:resetTimerSettings={resetTimerSettings}\n                />\n            </div>\n        {:else}\n            <div class=\"grid-item\" id=\"work-sessions-counter\">\n                <WorkSessionCounter {workCount} {targetWorkCount} />\n            </div>\n\n            <div class=\"grid-item\" id=\"timer-display\">\n                <TimerDisplay {duration} />\n            </div>\n\n            <div class=\"grid-item\" id=\"timer-button\">\n                {#if timerStarted}\n                    <button\n                        on:click={() => {\n                            autoStartTimer = false;\n                            stopCountDownTimer();\n                        }}\n                    >\n                        Skip Timer\n                    </button>\n                {:else}\n                    <button on:click={startCountDownTimer}>Start Timer</button>\n                {/if}\n            </div>\n        {/if}\n    </div>\n</div>\n\n<style>\n    button {\n        background-color: transparent;\n        color: inherit;\n        font-size: 24px;\n\n        border: 3px solid;\n        border-radius: 10px;\n        padding: 12px;\n        margin: 0;\n    }\n    button:hover {\n        background-color: var(--theme-colors-primary_dark);\n    }\n\n    .grid-container {\n        display: grid;\n        grid-template-columns: repeat(4, 1fr);\n        grid-template-rows: repeat(5, 1fr);\n        grid-column-gap: 20px;\n        grid-row-gap: 20px;\n    }\n    .grid-item {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .settings__active {\n        background-color: var(--theme-colors-secondary);\n    }\n\n    #pomodoro-timer {\n        background-color: var(--theme-colors-primary);\n        color: var(--theme-colors-text);\n        text-align: center;\n        border-radius: 10px;\n    }\n\n    #timer {\n        height: 400px;\n        padding: 20px;\n        border-radius: 10px;\n    }\n\n    #work-sessions-counter {\n        grid-area: 1 / 2 / 2 / 4;\n    }\n    #toggle-settings {\n        grid-area: 1 / 4 / 2 / 5;\n        z-index: 1;\n    }\n    #timer-display {\n        grid-area: 2 / 2 / 5 / 4;\n    }\n    #timer-button {\n        grid-area: 5 / 2 / 6 / 4;\n    }\n\n    #settings {\n        grid-area: 1 / 1 / 6 / 5;\n    }\n</style>\n","<script>\n\timport { ThemeWrapper, ThemeToggle } from \"svelte-themer\";\n\timport themes from \"./themes.js\";\n\n\timport PomoTimer from \"./PomoTimer.svelte\";\n</script>\n\n<ThemeWrapper {themes}>\n\t<main>\n\t\t<!-- <ThemeToggle /> -->\n\t\t<PomoTimer />\n\t</main>\n</ThemeWrapper>\n\n<style>\n\t:global(html) {\n\t\tbackground-color: var(--theme-colors-background, initial);\n\t}\n\n\tmain {\n\t\tmax-width: 480px;\n\t\tmargin: 0 auto;\n\t}\n\n\t/* @media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t} */\n</style>\n","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n});\n\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","src_url_equal","element_src","url","document","createElement","href","subscribe","store","callbacks","unsub","unsubscribe","get_store_value","value","_","get_slot_context","definition","ctx","$$scope","tar","src","k","assign","slice","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","prevent_default","preventDefault","call","this","attr","attribute","removeAttribute","getAttribute","setAttribute","to_number","set_data","wholeText","set_input_value","input","HtmlTag","constructor","is_svg","e","n","c","html","h","m","nodeName","createElementNS","t","i","innerHTML","Array","from","childNodes","length","p","d","set_current_component","component","get_current_component","Error","createEventDispatcher","type","detail","cancelable","$$","bubbles","createEvent","initCustomEvent","custom_event","defaultPrevented","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","add_flush_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","pop","callback","has","add","clear","fragment","before_update","dirty","after_update","outroing","outros","transition_in","block","local","delete","transition_out","o","globals","window","globalThis","global","destroy_block","lookup","key","update_keyed_each","old_blocks","get_key","dynamic","list","destroy","create_each_block","next","get_context","old_indexes","new_blocks","new_lookup","Map","deltas","child_ctx","get","set","Math","abs","will_move","did_move","first","new_block","old_block","new_key","old_key","bind","index","props","undefined","bound","create_component","mount_component","customElement","on_mount","on_destroy","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","append_styles","parent_component","on_disconnect","context","skip_bound","root","ready","ret","rest","hydrate","nodes","children","l","intro","SvelteComponent","$destroy","$on","indexOf","splice","$set","$$props","obj","$$set","keys","presets","light","colors","background","contrast","primary","primary_dark","secondary","dark","forest","subscriber_queue","writable","start","stop","subscribers","new_value","run_queue","subscriber","invalidate","size","currentMode","currentThemeName","currentThemeObject","themes","toggle","themesStore","current","reduce","newCurrent","theme","source","processConfig","result","recurse","prop","replace","toLowerCase","createCSSVariableName","variablePrefix","createCSSVariableOverride","initialVariableName","themeVariableName","slot_ctx","document_1","head","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","lets","merged","len","max","STORAGE_KEY","VARIABLE_PREFIX","VALID_MODES","INVALID_MODE_MESSAGE","join","prefix","mode","base","prototype","toString","trim","includes","fallback","$currentThemeName","style","processedBaseConfig","baseCSSVariables","entries","rootCSSVariables","concat","themeCSSContent","themeName","themeValues","processed","overrides","some","variableName","themeCSSClassName","vars","createCSSVariableStatement","createCSSTemplate","setContext","darkSchemeQuery","matchMedia","preferredMode","matches","saved","localStorage","getItem","setItem","afterUpdate","documentElement","t0_value","label","button","button_class_value","t0","div","iterations","timers","currentTimer","timerStarted","$$invalidate","timer","settingsImage","img","img_src_value","closeSettingsImage","create_if_block","settingsVisible","form","div0","h2","label0","input0","label1","input1","label2","input2","label3","input3","div1","button0","button1","ul","workDurationInput","shortRestDurationInput","longRestDurationInput","dispatch","workDuration","shortRestDuration","longRestDuration","autoStartTimer","inputs","getElementsByTagName","checked","span","each_value_1","workCount","targetWorkCount","duration","minutes_text","floor","seconds_text","create_if_block_1","div2","timeInMins","settings_changes","r","Timer","time","DEFAULT_TIMERS","countDownTimer","workTimer","shortBreakTimer","longBreakTimer","startCountDownTimer","setInterval","stopCountDownTimer","clearInterval","console","log","isNaN","main","body"],"mappings":"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"}